version: '3.0'
services:
  server:
    build: server
    ports:
      - "8080:8080"
    command: bash -c "
      /scripts/wait-for-it.sh db:3306 --timeout=60 --strict &&
      go run main.go"
    env_file:
      - ./server/.env
    volumes:
      - type: bind
        source: ./server
        target: /server
    depends_on:
      - db

  db:
    image: mysql:8.0.29
    platform: linux/amd64 # For M1 mac...
    environment:
      MYSQL_DATABASE: 'knowtfolio-db'
      MYSQL_ROOT_PASSWORD: 'password'
      MYSQL_ROOT_HOST: '%'
      TZ: 'Asia/Tokyo'
    ports:
      - "3306:3306"

  test:
    build: server
    command: bash -c "
      /scripts/wait-for-it.sh db:3306 --timeout=60 --strict &&
      /scripts/wait-for-it.sh hardhat:8545 --timeout=60 --strict &&
      go test -count=1 ./models/... ./services/..."
    env_file:
      # For AWS Credentials
      - server/.env
    environment:
      # Account#2 of hardhat local node.
      ADMIN_PRIVATE_KEY: 5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a
      CONTRACT_ADDRESS: will-be-set-in-the-program
      NETWORK_URI: ws://hardhat:8545
      CHAIN_ID: 31337
    volumes:
      - type: bind
        source: ./server
        target: /server
    depends_on:
      - db
      - hardhat

  goa:
    build:
      context: server
      dockerfile: goa.Dockerfile
    entrypoint: /entrypoint.sh
    command: [
        "/server/go/bin/goa", "gen",
        "github.com/team-azb/knowtfolio/${GOA_DESIGN_DIR}",
        "-o", "/${GOA_DIR}"
    ]
    environment:
      CHOWN_WORKDIR: 1
      HOST_UID: ${HOST_UID}
      HOST_GID: ${HOST_GID}
    volumes:
      - type: bind
        source: ./server/gateways/api
        target: /server/gateways/api
      - type: bind
        source: ./entrypoint.sh
        target: /entrypoint.sh

  go-eth-binding:
    image: ethereum/client-go:alltools-v1.10.20
    command: [
        "abigen", "--abi", "${CONTRACT_ABI_FILE}", "--bin", "${CONTRACT_BIN_FILE}",
        "--pkg", "ethereum", "--type", "ContractBinding", "--out", "${GO_ETH_BINDING_PATH}"
    ]
    volumes:
      - type: bind
        source: ./blockchain
        target: /blockchain
      - type: bind
        source: ./server
        target: /server

  hardhat:
    build:
      context: .
      dockerfile: blockchain/Dockerfile
    ports:
      - "8545:8545"
    environment:
      HOST_UID: ${HOST_UID}
      HOST_GID: ${HOST_GID}
    entrypoint: /entrypoint.sh
    command: npm --prefix ./blockchain run node
    volumes:
      - type: bind
        source: ./blockchain
        target: /work/blockchain
      - type: bind
        source: ./server
        target: /work/server
      - type: bind
        source: ./entrypoint.sh
        target: /entrypoint.sh

  terraform:
    image: hashicorp/terraform:1.2.8
    working_dir: /work
    volumes:
      - type: bind
        source: ./infrastructure
        target: /work
