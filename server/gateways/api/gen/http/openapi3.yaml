openapi: 3.0.3
info:
    title: Knowtfolio Backend
    description: Blogging platform that leverages NFT to grow, buy and sell articles.
    version: "1.0"
servers:
    - url: http://localhost:8080
paths:
    /api/articles:
        post:
            tags:
                - articles
            summary: Create articles
            description: Create new article.
            operationId: articles#Create
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CreateRequestBody'
                        example:
                            address: '''0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266'''
                            content: <h1> Hello World! </h1>
                            signature: Odit et voluptates quis nulla pariatur optio.
                            title: My Awesome Article
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateResponseBody'
                            example:
                                content: <h1> Hello World! </h1>
                                id: exampleId01
                                title: My Awesome Article
                "401":
                    description: 'unauthenticated: 認証に失敗した場合'
                    content:
                        application/vnd.goa.error+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                "404":
                    description: 'article_not_found: 記事IDに対応する記事が見つからなかった場合'
                    content:
                        application/vnd.goa.error+json:
                            schema:
                                $ref: '#/components/schemas/Error'
    /api/articles/{id}:
        delete:
            tags:
                - articles
            summary: Delete articles
            description: Delete article by id.
            operationId: articles#Delete
            parameters:
                - name: id
                  in: path
                  description: 記事のID
                  required: true
                  schema:
                    type: string
                    description: 記事のID
                    example: exampleId01
                    pattern: ^[A-Za-z0-9_-]+$
                    minLength: 11
                    maxLength: 11
                  example: exampleId01
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DeleteRequestBody'
                        example:
                            address: '''0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266'''
                            signature: Et in explicabo quia tenetur.
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeleteResponseBodyOnlyID'
                            example:
                                id: exampleId01
                "401":
                    description: 'unauthenticated: 認証に失敗した場合'
                    content:
                        application/vnd.goa.error+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                "403":
                    description: 'unauthorized: 操作を行う権限がない場合'
                    content:
                        application/vnd.goa.error+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                "404":
                    description: 'article_not_found: 記事IDに対応する記事が見つからなかった場合'
                    content:
                        application/vnd.goa.error+json:
                            schema:
                                $ref: '#/components/schemas/Error'
        get:
            tags:
                - articles
            summary: Read articles
            description: Get article by id.
            operationId: articles#Read
            parameters:
                - name: id
                  in: path
                  description: 記事のID
                  required: true
                  schema:
                    type: string
                    description: 記事のID
                    example: exampleId01
                    pattern: ^[A-Za-z0-9_-]+$
                    minLength: 11
                    maxLength: 11
                  example: exampleId01
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ReadResponseBodyWithOwnerAddress'
                            example:
                                content: <h1> Hello World! </h1>
                                id: exampleId01
                                owner_address: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 '
                                title: My Awesome Article
                "404":
                    description: 'article_not_found: 記事IDに対応する記事が見つからなかった場合'
                    content:
                        application/vnd.goa.error+json:
                            schema:
                                $ref: '#/components/schemas/Error'
        put:
            tags:
                - articles
            summary: Update articles
            description: Update an article.
            operationId: articles#Update
            parameters:
                - name: id
                  in: path
                  description: 記事のID
                  required: true
                  schema:
                    type: string
                    description: 記事のID
                    example: exampleId01
                    pattern: ^[A-Za-z0-9_-]+$
                    minLength: 11
                    maxLength: 11
                  example: exampleId01
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateRequestBody'
                        example:
                            address: '''0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266'''
                            content: <h1> Hello World! </h1>
                            signature: Aliquid atque.
                            title: My Awesome Article
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateResponseBody'
                            example:
                                content: <h1> Hello World! </h1>
                                id: exampleId01
                                title: My Awesome Article
                "401":
                    description: 'unauthenticated: 認証に失敗した場合'
                    content:
                        application/vnd.goa.error+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                "403":
                    description: 'unauthorized: 操作を行う権限がない場合'
                    content:
                        application/vnd.goa.error+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                "404":
                    description: 'article_not_found: 記事IDに対応する記事が見つからなかった場合'
                    content:
                        application/vnd.goa.error+json:
                            schema:
                                $ref: '#/components/schemas/Error'
    /api/nfts/{article_id}:
        post:
            tags:
                - nfts
            summary: Create for Article nfts
            description: MINT an NFT of the article.
            operationId: nfts#Create for Article
            parameters:
                - name: article_id
                  in: path
                  description: 記事のID
                  required: true
                  schema:
                    type: string
                    description: 記事のID
                    example: exampleId01
                    pattern: ^[A-Za-z0-9_-]+$
                    minLength: 11
                    maxLength: 11
                  example: exampleId01
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DeleteRequestBody'
                        example:
                            address: '''0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266'''
                            signature: Velit nam quis facilis.
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CreateNftForArticleResult'
                            example:
                                cost: 2272994791495004502
                                hash: A velit et et dolorem sed pariatur.
                "401":
                    description: 'unauthenticated: 認証に失敗した場合'
                    content:
                        application/vnd.goa.error+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                "403":
                    description: 'unauthorized: 操作を行う権限がない場合'
                    content:
                        application/vnd.goa.error+json:
                            schema:
                                $ref: '#/components/schemas/Error'
                "404":
                    description: 'article_not_found: 記事IDに対応する記事が見つからなかった場合'
                    content:
                        application/vnd.goa.error+json:
                            schema:
                                $ref: '#/components/schemas/Error'
    /api/search:
        get:
            tags:
                - search
            summary: Search for Articles search
            description: Get articles that matches to the request query.
            operationId: search#Search for Articles
            parameters:
                - name: keywords
                  in: query
                  description: 検索に使用するキーワード。`+`で区切ることで、複数指定可能
                  allowEmptyValue: true
                  schema:
                    type: string
                    description: 検索に使用するキーワード。`+`で区切ることで、複数指定可能
                    example: Golang+NFT
                  example: Golang+NFT
                - name: owned_by
                  in: query
                  description: 記事の所有者。指定がない場合、全ての所有者の記事を検索する。
                  allowEmptyValue: true
                  schema:
                    type: string
                    description: 記事の所有者。指定がない場合、全ての所有者の記事を検索する。
                    example: '''0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266'''
                    pattern: ^0x[a-fA-F0-9]{40}$
                  example: '''0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266'''
                - name: sort_by
                  in: query
                  description: 記事をソートするkey
                  allowEmptyValue: true
                  schema:
                    type: string
                    description: 記事をソートするkey
                    default: created_at
                    example: created_at
                    enum:
                        - created_at
                        - updated_at
                  example: created_at
                - name: page_num
                  in: query
                  description: 取得したい位置のページ番号（1-indexed）
                  allowEmptyValue: true
                  schema:
                    type: integer
                    description: 取得したい位置のページ番号（1-indexed）
                    default: 1
                    example: 11672134284603955137
                    minimum: 1
                  example: 13903759627942341001
                - name: page_size
                  in: query
                  description: 1ページあたりのコンテンツ数
                  allowEmptyValue: true
                  schema:
                    type: integer
                    description: 1ページあたりのコンテンツ数
                    default: 10
                    example: 76
                    minimum: 1
                    maximum: 100
                  example: 53
            responses:
                "200":
                    description: OK response.
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Searchresult'
                            example:
                                results:
                                    - id: exampleId01
                                      owner_address: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 '
                                      title: My Awesome Article
                                    - id: exampleId01
                                      owner_address: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 '
                                      title: My Awesome Article
                                total_count: 9017659154547287277
    /articles/{id}:
        get:
            tags:
                - articles-html
            summary: Read HTML articles-html
            description: Get article's HTML by id.
            operationId: articles-html#Read HTML
            parameters:
                - name: id
                  in: path
                  description: 記事のID
                  required: true
                  schema:
                    type: string
                    description: 記事のID
                    example: exampleId01
                    pattern: ^[A-Za-z0-9_-]+$
                    minLength: 11
                    maxLength: 11
                  example: exampleId01
            responses:
                "200":
                    description: IDに対応する記事のHTMLのバイナリ
                    content:
                        text/html; charset=UTF-8:
                            schema:
                                type: string
                                example: <h1> Hello World! </h1>
                                format: binary
                            example: <h1> Hello World! </h1>
                "404":
                    description: 'article_not_found: 記事IDに対応する記事が見つからなかった場合'
                    content:
                        application/vnd.goa.error+json:
                            schema:
                                $ref: '#/components/schemas/Error'
components:
    schemas:
        CreateNftForArticleResult:
            type: object
            properties:
                cost:
                    type: integer
                    description: トークン発行にかかったコスト
                    example: 5250902387539283934
                    format: int64
                hash:
                    type: string
                    description: トランザクションのハッシュ
                    example: Voluptatem debitis nesciunt nesciunt alias nulla.
            example:
                cost: 3983753186087891933
                hash: Odio voluptas voluptatibus sunt esse.
            required:
                - hash
                - cost
        CreateRequestBody:
            type: object
            properties:
                address:
                    type: string
                    description: ウォレットのアドレス
                    example: '''0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266'''
                    pattern: ^0x[a-fA-F0-9]{40}$
                content:
                    type: string
                    description: 本文のHTML
                    example: <h1> Hello World! </h1>
                signature:
                    type: string
                    description: '`address`のアカウントが行った署名'
                    example: Magni maxime voluptates.
                title:
                    type: string
                    example: My Awesome Article
            description: 作成したい記事の情報
            example:
                address: '''0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266'''
                content: <h1> Hello World! </h1>
                signature: Odit dolorem eius.
                title: My Awesome Article
            required:
                - title
                - content
                - address
                - signature
        CreateResponseBody:
            type: object
            properties:
                content:
                    type: string
                    description: 本文のHTML
                    example: <h1> Hello World! </h1>
                id:
                    type: string
                    description: 記事のID
                    example: exampleId01
                    pattern: ^[A-Za-z0-9_-]+$
                    minLength: 11
                    maxLength: 11
                title:
                    type: string
                    example: My Awesome Article
            description: CreateResponseBody result type (default view)
            example:
                content: <h1> Hello World! </h1>
                id: exampleId01
                title: My Awesome Article
            required:
                - id
                - title
                - content
        DeleteRequestBody:
            type: object
            properties:
                address:
                    type: string
                    description: ウォレットのアドレス
                    example: '''0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266'''
                    pattern: ^0x[a-fA-F0-9]{40}$
                signature:
                    type: string
                    description: '`address`のアカウントが行った署名'
                    example: Nisi dolor sapiente laboriosam veniam eos.
            example:
                address: '''0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266'''
                signature: Itaque et esse molestiae illum temporibus.
            required:
                - address
                - signature
        DeleteResponseBodyOnlyID:
            type: object
            properties:
                id:
                    type: string
                    description: 記事のID
                    example: exampleId01
                    pattern: ^[A-Za-z0-9_-]+$
                    minLength: 11
                    maxLength: 11
            description: DeleteResponseBody result type (only-id view)
            example:
                id: exampleId01
            required:
                - id
        Error:
            type: object
            properties:
                fault:
                    type: boolean
                    description: Is the error a server-side fault?
                    example: false
                id:
                    type: string
                    description: ID is a unique identifier for this particular occurrence of the problem.
                    example: 123abc
                message:
                    type: string
                    description: Message is a human-readable explanation specific to this occurrence of the problem.
                    example: parameter 'p' must be an integer
                name:
                    type: string
                    description: Name is the name of this class of errors.
                    example: bad_request
                temporary:
                    type: boolean
                    description: Is the error temporary?
                    example: true
                timeout:
                    type: boolean
                    description: Is the error a timeout?
                    example: true
            example:
                id: 3F1FKVRR
                message: Value of ID must be an integer
                name: bad_request
            required:
                - name
                - id
                - message
                - temporary
                - timeout
                - fault
        ReadResponseBodyWithOwnerAddress:
            type: object
            properties:
                content:
                    type: string
                    description: 本文のHTML
                    example: <h1> Hello World! </h1>
                id:
                    type: string
                    description: 記事のID
                    example: exampleId01
                    pattern: ^[A-Za-z0-9_-]+$
                    minLength: 11
                    maxLength: 11
                owner_address:
                    type: string
                    description: 所有者のウォレットのアドレス
                    example: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 '
                    pattern: ^0x[a-fA-F0-9]{40}$
                title:
                    type: string
                    example: My Awesome Article
            description: ReadResponseBody result type (with-owner-address view)
            example:
                content: <h1> Hello World! </h1>
                id: exampleId01
                owner_address: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 '
                title: My Awesome Article
            required:
                - id
                - title
                - content
                - owner_address
        SearchResultEntry:
            type: object
            properties:
                id:
                    type: string
                    description: 記事のID
                    example: exampleId01
                    pattern: ^[A-Za-z0-9_-]+$
                    minLength: 11
                    maxLength: 11
                owner_address:
                    type: string
                    description: 所有者のウォレットのアドレス
                    example: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 '
                    pattern: ^0x[a-fA-F0-9]{40}$
                title:
                    type: string
                    example: My Awesome Article
            example:
                id: exampleId01
                owner_address: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 '
                title: My Awesome Article
            required:
                - id
                - title
                - owner_address
        Searchresult:
            type: object
            properties:
                results:
                    type: array
                    items:
                        $ref: '#/components/schemas/SearchResultEntry'
                    description: 指定したページ内の検索結果
                    example:
                        - id: exampleId01
                          owner_address: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 '
                          title: My Awesome Article
                        - id: exampleId01
                          owner_address: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 '
                          title: My Awesome Article
                        - id: exampleId01
                          owner_address: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 '
                          title: My Awesome Article
                total_count:
                    type: integer
                    description: 指定したページを含めたすべての検索結果の件数
                    example: 5023432583872562116
            example:
                results:
                    - id: exampleId01
                      owner_address: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 '
                      title: My Awesome Article
                    - id: exampleId01
                      owner_address: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 '
                      title: My Awesome Article
                total_count: 18413131499743742823
            required:
                - results
                - total_count
        UpdateRequestBody:
            type: object
            properties:
                address:
                    type: string
                    description: ウォレットのアドレス
                    example: '''0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266'''
                    pattern: ^0x[a-fA-F0-9]{40}$
                content:
                    type: string
                    description: 本文のHTML
                    example: <h1> Hello World! </h1>
                signature:
                    type: string
                    description: '`address`のアカウントが行った署名'
                    example: Alias libero saepe officiis provident.
                title:
                    type: string
                    example: My Awesome Article
            description: |-
                記事の更新内容
                リクエストに含まれるフィールドだけ更新される。
            example:
                address: '''0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266'''
                content: <h1> Hello World! </h1>
                signature: Qui itaque ipsum vel eligendi distinctio consectetur.
                title: My Awesome Article
            required:
                - address
                - signature
tags:
    - name: articles
      description: 記事サービス
    - name: articles-html
      description: SEO対策で、記事の表示だけ直接HTMLで返すためのサービス
    - name: nfts
      description: NFTを管理するサービス
    - name: search
      description: 検索サービス
